{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./algos.js","webpack:///./formulas/annulus_point_randomizer.js","webpack:///./formulas/distance.js","webpack:///./lib/check_candidate.js","webpack:///./lib/grid.js","webpack:///./lib/sample_to_grid_converter.js","webpack:///./poissonDiscAlgo.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;ACnEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW,IAAI,WAAW,IAAI,WAAW;AAC9E;AACA;AACA;AACA,QAAQ;AACR;;AAEA,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;;;;;;;;;;;;;;;ACrBA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;;AAEA;AACA,kBAAkB,QAAQ;AAC1B;AACA,iDAAiD;AACjD,oBAAoB,QAAQ;AAC5B;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AClBA;AACA;;AAEA;;AAEA,iBAAiB,eAAe;AAChC;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACXA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,yCAAyC,iBAAiB;AAC1D,yCAAyC,0DAA0D;AACnG;AACA;AACA;AACA,sCAAsC,WAAW,IAAI,WAAW,IAAI,WAAW;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D,0CAA0C,iBAAiB;AAC3D,0CAA0C,0DAA0D;AACpG;AACA;AACA;AACA,uCAAuC,WAAW,IAAI,WAAW,IAAI,WAAW;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./algos.js\");\n","import poisson from './poissonDiscAlgo'\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.poisson = poisson\n\n  let original = document.getElementById(\"myCanvas\")\n  let drawn = document.getElementById(\"myCanvas2\")\n  let ctx = original.getContext(\"2d\")\n  let drawnCtx = drawn.getContext(\"2d\")\n  const vase = new Image()\n  vase.src = 'images/vase.jpg'\n  vase.onload = () => {\n    ctx.drawImage(vase,0,0)\n    let results = poisson(833, 1000, 5, 30, 2, ctx, drawnCtx)\n    // results.forEach((point) => {\n    //   let imgData = ctx.getImageData(point[0], point[1], 1, 1).data\n    //   drawnCtx.beginPath();\n    //   drawnCtx.fillStyle = `rgb(${imgData[0]}, ${imgData[1]}, ${imgData[2]})`\n    //   drawnCtx.arc(point[0], point[1], 4, 0, 2*Math.PI);\n    //   drawnCtx.fill()\n    //   drawnCtx.stroke()\n    // })\n  }\n\n})\n","const newAnnulusPoint = (currentPos, r, canvasWidth, canvasHeight) => {\n  const angle = Math.round(Math.random() * 360)\n  const distance = Math.round(Math.random() * r + r)\n\n  const x = Math.round(distance * Math.cos(angle))\n  const y = Math.round(distance * Math.sin(angle))\n  const newPoint = [(currentPos[0] + x), currentPos[1] + y]\n\n  if (newPoint[0] >= 0 && newPoint[0] < canvasWidth && newPoint[1] >= 0 && newPoint[1] < canvasHeight){\n    return newPoint;\n  }else{\n    return newAnnulusPoint(currentPos, r, canvasWidth, canvasHeight)\n  }\n}\n\nexport default newAnnulusPoint\n\n// const randomizer = (r) => {\n//   if (Math.round(Math.random())) {\n//     return Math.round(Math.random() * r + r * -1)\n//   }else{\n//     return Math.round(Math.random() * r + r)\n//   }\n// }\n","\n\nexport default (posA, posB) => {\n\n  const dx = Math.max(posA[0], posB[0]) - Math.min(posA[0], posB[0])\n  const dy = Math.max(posA[1], posB[1]) - Math.min(posA[1], posB[1])\n\n  const dab = Math.sqrt((dx * dx) + (dy * dy))\n  return dab\n}\n","import distance from '../formulas/distance'\nimport gridConverter from './sample_to_grid_converter'\n\nexport default (allSamples) => (theGrid) => (currentPos, gridPos, r) => {\n  for (let i = -2; i <= 2; i++){\n    let checkX = gridPos[0] - i\n    if (checkX < 0 || checkX >= theGrid.length) { continue }\n    for (let j = -2; j <= 2; j++){\n      let checkY = gridPos[1] - j\n      if (checkY < 0 || checkY >= theGrid[checkX].length) { continue }\n      if (theGrid[checkX][checkY] !== -1){\n        let indexOfPosToCheck = theGrid[checkX][checkY]\n        if (distance(currentPos, allSamples[indexOfPosToCheck]) <= r){\n          return false\n        }\n      }\n    }\n  }\n\n  return true\n}\n","\n\nexport default (dimensions, r, gridWidth, gridHeight) => {\n  const n = dimensions\n\n  let theGrid = []\n\n  for (let i = 0; i < gridWidth; i++){\n    theGrid.push(Array(gridHeight).fill(-1))\n  }\n\n  return theGrid\n}\n","\nexport default (cellSize) => (samplePos) => {\n  let modX = Math.floor(samplePos[0] / cellSize)\n  let modY = Math.floor(samplePos[1] / cellSize)\n\n  return [modX, modY]\n}\n","import theGridMaker from './lib/grid.js'\nimport randomAnnulusPoint from './formulas/annulus_point_randomizer'\nimport distanceFrom from './formulas/distance'\nimport gridConverter from './lib/sample_to_grid_converter'\nimport checkCandidateFrame from './lib/check_candidate'\n\n\nexport default (canvasWidth, canvasHeight, r, k, dimensions, ctx, drawnCtx) => {\n  // step 0 initilaize n-dimentionsal background grid for storing samples and accelerating spatial searches\n  const cellSize = Math.floor(r / Math.sqrt(dimensions))\n  const gridHeight = Math.ceil(canvasHeight / cellSize)\n  const gridWidth = Math.ceil(canvasWidth / cellSize)\n\n  //curried function - takes cellSize, returns function that takes position\n  const converter = gridConverter(cellSize)\n\n  const theGrid = theGridMaker(2, r, gridWidth, gridHeight)\n  const allSamples = []\n  let activeSamples = []\n\n  // step 1 select initial sample\n\n  const initialSample = [Math.round(Math.random() * canvasWidth), Math.round(Math.random() * canvasHeight)]\n  const initialGridSample = converter(initialSample)\n\n  allSamples.push(initialSample)\n  activeSamples.push(0)\n\n  theGrid[initialGridSample[0]][initialGridSample[1]] = 0\n  const checkCandidate = checkCandidateFrame(allSamples)(theGrid)\n\n  const getNextSample = (samples) => {\n      let tries = 0\n      let randomIndex = Math.floor(activeSamples.length * Math.random())\n      let currentActivePos = allSamples[activeSamples[randomIndex]]\n      while(tries < k){\n        let currentCandidate = randomAnnulusPoint(currentActivePos, r, canvasWidth, canvasHeight)\n\n\n        if (checkCandidate(currentCandidate, converter(currentCandidate), r)){\n          allSamples.push(currentCandidate)\n          activeSamples.push(allSamples.length - 1)\n          let currentGridCandidate = converter(currentCandidate)\n          // console.log(`gridCand= ${currentGridCandidate}`)\n          // console.log(`currentCand= ${currentCandidate}`)\n          // console.log(`currentGrid= ${theGrid[currentGridCandidate[0]][currentGridCandidate[1]]}`)\n          theGrid[currentGridCandidate[0]][currentGridCandidate[1]] = allSamples.length - 1\n          let imgData = ctx.getImageData(currentCandidate[0], currentCandidate[1], 1, 1).data\n          drawnCtx.beginPath();\n          drawnCtx.fillStyle = `rgb(${imgData[0]}, ${imgData[1]}, ${imgData[2]})`\n          drawnCtx.arc(currentCandidate[0], currentCandidate[1], 3, 0, 2*Math.PI);\n          drawnCtx.fill()\n          // drawnCtx.stroke()\n          break;\n        }\n        else {\n          tries++\n        }\n      }\n\n      if (tries === k) {\n        activeSamples.splice(randomIndex, 1)\n      }\n\n  }\n\n  //run algo until activeSamples is empty\n  // while (activeSamples.length > 0) {\n  //   let tries = 0\n  //   let randomIndex = Math.floor(activeSamples.length * Math.random())\n  //   let currentActivePos = allSamples[activeSamples[randomIndex]]\n  //   while(tries < k){\n  //     let currentCandidate = randomAnnulusPoint(currentActivePos, r, canvasWidth, canvasHeight)\n  //\n  //\n  //     if (checkCandidate(currentCandidate, converter(currentCandidate), r)){\n  //       allSamples.push(currentCandidate)\n  //       activeSamples.push(allSamples.length - 1)\n  //       let currentGridCandidate = converter(currentCandidate)\n  //       // console.log(`gridCand= ${currentGridCandidate}`)\n  //       // console.log(`currentCand= ${currentCandidate}`)\n  //       // console.log(`currentGrid= ${theGrid[currentGridCandidate[0]][currentGridCandidate[1]]}`)\n  //       theGrid[currentGridCandidate[0]][currentGridCandidate[1]] = allSamples.length - 1\n  //       let imgData = ctx.getImageData(currentCandidate[0], currentCandidate[1], 1, 1).data\n  //       drawnCtx.beginPath();\n  //       drawnCtx.fillStyle = `rgb(${imgData[0]}, ${imgData[1]}, ${imgData[2]})`\n  //       drawnCtx.arc(currentCandidate[0], currentCandidate[1], 4, 0, 2*Math.PI);\n  //       drawnCtx.fill()\n  //       drawnCtx.stroke()\n  //       break;\n  //     }\n  //     else {\n  //       tries++\n  //     }\n  //   }\n  //\n  //   if (tries === k) {\n  //     activeSamples.splice(randomIndex, 1)\n  //   }\n  //\n  // }\n\n  // window.setInterval(getNextSample, 0)\n\n  return allSamples\n}\n"],"sourceRoot":""}